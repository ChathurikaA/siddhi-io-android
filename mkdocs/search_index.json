{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-io-android\n\n\nThe \nsiddhi-io-android extension\n is a collection of extensions to \nSiddhi\n that receives and publishes events to/from Android Device.\nUsing the extensions events can be received from different sensors available in android devices, events can be published as Notifications or Broadcast Intents.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.0-SNAPSHOT\n.\n\n\nHow to use\n\n\nUsing the extension with \nSiddhi Android Platform\n\n\n\n\nThis extension can be added as a Gradle dependency along with other Siddhi dependencies to your Android project.\n\n\n\n\n     dependencies {\n        compile 'org.wso2.siddhi.io.android:siddhi-io-android:1.0.0-SNAPSHOT'\n     }\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nAndroid Broadcast\n \n(\nSink\n)\nThis will publish events arriving to the stream through android broadcasts intents which has attribute values as extras.\n\n\nAndroid Sound\n \n(\nSink\n)\nThis will play android phone ringtone when ever it receives an event. It will played for a user specified time period\n\n\n\n\nAndroid Notification\n \n(\nSink\n)\nThis will publish events arriving to the stream through android notifications\n\n\n\n\n\n\nAndroid Humidity\n(\nSource\n)\nThis will receive events from Humidity sensor of android device \n\n\n\n\n\n\nAndroid Gravity\n(\nSource\n)\nThis will receive events from Gravity sensor of android device\n\n\n\n\n\n\nAndroid Linear Accelerometer\n(\nSource\n)\nThis will receive events from Linear Accelerometer sensor of android device\n\n\n\n\n\n\nAndroid Pressure \n(\nSource\n)\nThis will receive events from Pressure sensor of android device\n\n\n\n\n\n\nAndroid Rotation\n(\nSource\n)\nThis will receive events from Rotation sensor of android device\n\n\n\n\n\n\nAndroid Light \n(\nSource\n)\nThis will receive events from Light sensor of android device\n\n\n\n\n\n\nAndroid Magnetic \n(\nSource\n)\nThis will receive events from Magnetic sensor of android device\n\n\n\n\n\n\nAndroid Steps \n(\nSource\n)\nThis will receive events from Steps sensor of android device\n\n\n\n\n\n\nAndroid Accelerometer \n(\nSource\n)\nThis will receive events from Accelerometer sensor of android device\n\n\n\n\n\n\nAndroid Game Rotation\n(\nSource\n)\nThis will receive events from Game Rotation sensor of android device\n\n\n\n\n\n\nAndroid Proximity \n(\nSource\n)\nThis will receive events from Proximity sensor of android device\n\n\n\n\n\n\nAndroid Gyroscope\n(\nSource\n)\nThis will receive events from Gyroscope sensor of android device\n\n\n\n\n\n\nAndroid Broadcast\n(\nSource\n)\nThis will receive events from Broadcast sensor of android device\n\n\n\n\n\n\nAndroid Location\n(\nSource\n)\nThis will receive events from Location sensor of android device\n\n\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n.\n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n.\n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.\n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi IO Android"
        }, 
        {
            "location": "/#siddhi-io-android", 
            "text": "The  siddhi-io-android extension  is a collection of extensions to  Siddhi  that receives and publishes events to/from Android Device.\nUsing the extensions events can be received from different sensors available in android devices, events can be published as Notifications or Broadcast Intents.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-io-android"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.0-SNAPSHOT .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension with  Siddhi Android Platform   This extension can be added as a Gradle dependency along with other Siddhi dependencies to your Android project.        dependencies {\n        compile 'org.wso2.siddhi.io.android:siddhi-io-android:1.0.0-SNAPSHOT'\n     }", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "Android Broadcast   ( Sink ) This will publish events arriving to the stream through android broadcasts intents which has attribute values as extras.  Android Sound   ( Sink ) This will play android phone ringtone when ever it receives an event. It will played for a user specified time period   Android Notification   ( Sink ) This will publish events arriving to the stream through android notifications    Android Humidity ( Source ) This will receive events from Humidity sensor of android device     Android Gravity ( Source ) This will receive events from Gravity sensor of android device    Android Linear Accelerometer ( Source ) This will receive events from Linear Accelerometer sensor of android device    Android Pressure  ( Source ) This will receive events from Pressure sensor of android device    Android Rotation ( Source ) This will receive events from Rotation sensor of android device    Android Light  ( Source ) This will receive events from Light sensor of android device    Android Magnetic  ( Source ) This will receive events from Magnetic sensor of android device    Android Steps  ( Source ) This will receive events from Steps sensor of android device    Android Accelerometer  ( Source ) This will receive events from Accelerometer sensor of android device    Android Game Rotation ( Source ) This will receive events from Game Rotation sensor of android device    Android Proximity  ( Source ) This will receive events from Proximity sensor of android device    Android Gyroscope ( Source ) This will receive events from Gyroscope sensor of android device    Android Broadcast ( Source ) This will receive events from Broadcast sensor of android device    Android Location ( Source ) This will receive events from Location sensor of android device", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .    Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.    For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/", 
            "text": "API Docs - v1.0.0-SNAPSHOT\n\n\nSink\n\n\nandroid-broadcast \n(Sink)\n\n\nThis will publish events arriving to the stream through android broadcasts  intents which has attribute values as extras.\n\n\n\nSyntax\n\n\n@sink(type=\nandroid-broadcast\n, identifier=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nidentifier\n\n        \nIdentifier is a mandatory parameter which represents the actions of the broadcast. This action is used by broadcast listeners to identify the intent. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type = 'android-broadcast' , identifier = 'SIDDHI_BROADCAST',@map(type='keyvalue',@payload(message = 'Value is {{value}} taken from {{sensor}}')))\ndefine stream fooStream(sensor string, value float, accuracy float)\n\n\n\n\nThis will publish events arriving for fooStream as Intents which has key 'message' and value 'Value is...' string as extra information in the intent. Intent Listeners should listen for SIDDHI_BROADCAST action to receive this intent.\n\n\n\nEXAMPLE 2\n\n\n@sink(type = 'android-broadcast' , identifier = 'SIDDHI_BROADCAST',@map(type='keyvalue'))\ndefine stream fooStream(sensor string, value float, accuracy float)\n\n\n\n\nThis will publish events arriving for fooStream as Intents which has keys 'sensor','value','accuracy' and respective values as extra information in the intent. Intent Listeners should listen for SIDDHI_BROADCAST action to receive this intent.\n\n\n\nandroid-sound \n(Sink)\n\n\nThis will play android phone ringtone when ever it receives an event. It will played for a user specified time period\n\n\n\nSyntax\n\n\n@sink(type=\nandroid-sound\n, play.time=\nINT\n, ring.tone.uri=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nplay.time\n\n        \nThis parameter will specify the time period in seconds the ringing tone played\n\n        \n10\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nring.tone.uri\n\n        \nThis parameter will specify URI of the ringing tone to be played\n\n        \nNotification ring tone URI\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type = 'android-sound',play.time = \u201810\u2019, ring.tone='3',@map(type='keyvalue'))\ndefine stream fooStream(sensor string, value float, accuracy float)\n\n\n\n\nThis will ring the device when ever it receives an eventfor 10 seconds time\n\n\n\nandroid-notification \n(Sink)\n\n\nThis will publish events arriving to the stream through android notifications\n\n\n\nSyntax\n\n\n@sink(type=\nandroid-notification\n, multiple.notifications=\nBOOL\n, title=\nSTRING\n, icon=\nINT\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmultiple.notifications\n\n        \nIf multipleNotifications is set as true new notification will be published for every new event arriving at the stream. Otherwise it will override the previously published notification if it is not cleared.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntitle\n\n        \nTitle of the notification message\n\n        \nSiddhi Platform\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nicon\n\n        \nAndroid id of notification icon image resource\n\n        \nDefault icon\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type = 'android-notification',title = \u2018Example\u2019, icon = \u20181\u2019, multiple.notifications = \u2018true\u2019,@map(type='keyvalue',@payload(message = 'Value is {{value}} taken from {{sensor}}')))\ndefine stream fooStream(sensor string, value float, accuracy float)\n\n\n\n\nThis will publish events arrive to fooStream through android notifications which has title 'Example'. For each event it will send a new notification instead of updating the previous one. Notification will have format key:value\n\n\n\nEXAMPLE 2\n\n\n@sink(type = 'android-notification',title = \u2018Example\u2019, icon = \u20183\u2019, multiple.notifications = \u2018true\u2019,@map(type='keyvalue',@payload('Value is {{value}} taken from {{sensor}}')))\ndefine stream fooStream(sensor string, value float, accuracy float)\n\n\n\n\nThis will publish events arrive to fooStream through android notifications which has title 'Example'. For each event it will send a new notification instead of updating the previous one. Notification will contain the single message\n\n\n\nSource\n\n\nandroid-humidity \n(Source)\n\n\nHumidity Source gets events from humidity sensor of android device.This will output a key value map with humidity (humidity value), sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys \n\n\n\nSyntax\n\n\n@source(type=\nandroid-humidity\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \n polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-humidity' ,@map(type='keyvalue'))\ndefine stream humidityStream(sensor string, humidity float, accuracy int)\n\n\n\n\nThis will consume events from Humidity sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-humidity' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream humidityStream(sensor string, humidity float, accuracy int)\n\n\n\n\nThis will consume events from Humidity sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-gravity \n(Source)\n\n\nGravity Source gets events from gravity sensor of android device. This will output a key value map with gravityX (gravity vector component in X direction), gravityY(in Y diirection),gravityZ (in Z direction) sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-gravity\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \n polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-gravity' ,@map(type='keyvalue'))\ndefine stream gravityStream(sensor string, gravityX float, accuracy int)\n\n\n\n\nThis will consume events from Gravity sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-gravity' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream gravityStream(sensor string, gravityX float, accuracy int)\n\n\n\n\nThis will consume events from Gravity sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-linear-accelerometer \n(Source)\n\n\nLinear Accelerometer Source gets events from Linear accelerometer sensor of android device. This will output a key value map with accelerationX ( linear acceleration vector component in X direction), accelerationY(in Y diirection),accelerationZ (in Z direction) sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-linear-accelerometer\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \n polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-linear-accelerometer' ,@map(type='keyvalue'))\ndefine stream accelerometerStream(sensor string, accelerometerX float, accuracy int)\n\n\n\n\nThis will consume events from Linear Accelerometer sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-linear-accelerometer' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream accelerometerStream(sensor string, accelerometerX float, accuracy int)\n\n\n\n\nThis will consume events from  Linear Accelerometer sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-pressure \n(Source)\n\n\nPressure Source gets events from pressure sensor of android device. This will output a key value map with pressure (pressure in mbar), sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-pressure\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \npolling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-pressure' ,@map(type='keyvalue'))\ndefine stream pressureStream(sensor string, pressure float, accuracy int)\n\n\n\n\nThis will consume events from Pressure sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-pressure' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream pressureStream(sensor string, pressure float, accuracy int)\n\n\n\n\nThis will consume events from Pressure sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-rotation \n(Source)\n\n\nRotation vector Source gets events from rotation vector sensor of android device. The events are related to device\u2019s rate of rotation. This will output a key value map with rotationX (rotation vector component in X direction), rotationY(in Y diirection),rotationZ (in Z direction), valueScalar (scalar value) sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-rotation\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \npolling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-rotation' ,@map(type='keyvalue'))\ndefine stream rotaionStream(sensor string, rotationX float, accuracy int)\n\n\n\n\nThis will consume events from Rotation vector sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-rotation ' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream rotationStream(sensor string, rotationX float, accuracy int)\n\n\n\n\nThis will consume events from Rotation vector sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-light \n(Source)\n\n\nLight Source gets events from light sensor of android device. This will output a key value map with light (illuminance in lx), sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-light\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \n polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-light' ,@map(type='keyvalue'))\ndefine stream lightStream(sensor string, light float, accuracy int)\n\n\n\n\nThis will consume events from Light sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-light' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream lightStream(sensor string, light float, accuracy int)\n\n\n\n\nThis will consume events from Light sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-magnetic \n(Source)\n\n\nMagnetic Source gets events from magnetic sensor of android device. The events are related to ambient geomagnetic field. This will output a key value map with magneticX (Geomagnetic field strength in X direction), magneticY(in Y diirection),magneticZ (in Z direction) ,sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-magnetic\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \npolling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-magnetic' ,@map(type='keyvalue'))\ndefine stream magneticStream(sensor string, magneticX float, accuracy int)\n\n\n\n\nThis will consume events from Magnetic sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-magnetic' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream magneticStream(sensor string, magneticX float, accuracy int)\n\n\n\n\nThis will consume events from Magnetic sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-steps \n(Source)\n\n\nSteps Source gets events from step detector sensor of android device which is a software based sensor.\n\n\n\nSyntax\n\n\n@source(type=\nandroid-steps\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \n polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. If this is not specified 1 will be given as output for each step taken. Otherwise number of steps taken within this interval\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-steps' ,polling.interval = 100 ,@map(type='keyvalue'))\ndefine stream fooStream(sensor string, steps int, accuracy float)\n\n\n\n\nThis will consume events from Step Detector sensor transport It will insert number of steps taken within the time frame of polling interval.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-steps' ,@map(type='keyvalue'))\ndefine stream fooStream(sensor string, steps int, accuracy float)\n\n\n\n\nThis will consume events from Proximity sensor transport When ever user took a step it will input an event into the stream which has steps count as 1\n\n\n\nandroid-accelerometer \n(Source)\n\n\nAccelerometer Source gets events from accelerometer sensor of android device. This will output a key value map with accelerationX (acceleration in X direction), accelerationY(in Y diirection),accelerationZ(in Z direction) sensor (sensor name) and timestamp(tiime at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-accelerometer\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \n polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-accelerometer' ,@map(type='keyvalue'))\ndefine stream accelerometerStream(sensor string, accelerometerX float, accuracy int)\n\n\n\n\nThis will consume events from Accelerometer sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-accelerometer' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream accelerometerStream(sensor string, accelerometerX float, accuracy int)\n\n\n\n\nThis will consume events from Accelerometer sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-temperature \n(Source)\n\n\nTemperature Source gets events from temperature sensor of android device.This will output a key value map with temperature (temperature in C), sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-temperature\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \n polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-temperature' ,@map(type='keyvalue'))\ndefine stream temperatureStream(sensor string, temperature float, accuracy int)\n\n\n\n\nThis will consume events from Temperature sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-temperature' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream temperatureStream(sensor string, temperature float, accuracy int)\n\n\n\n\nThis will consume events from Temperature sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-game-rotation \n(Source)\n\n\nGame Rotation Source gets events from game Rotation sensor of android device. The events are related to device\u2019s rate of rotation. This will output a key value map with rotationX (rotation vector component in X direction), rotationY(in Y diirection),rotationZ (in Z direction) sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-game-rotation\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \npolling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-game-rotation' ,@map(type='keyvalue'))\ndefine stream Stream(sensor string, rotationX float, accuracy int)\n\n\n\n\nThis will consume events from Game Rotation sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-game-rotation' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream gameRotationStream(sensor string, rotationX float, accuracy int)\n\n\n\n\nThis will consume events from Game Rotation sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-proximity \n(Source)\n\n\nProximity Source gets events from proximity sensor of android device. This will output a key value map with proximity (distance in cm), sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-proximity\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \n polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-proximity' ,@map(type='keyvalue'))\ndefine stream proximityStream(sensor string, proximity float, accuracy int)\n\n\n\n\nThis will consume events from Proximity sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-proximity' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream proximityStream(sensor string, proximity float, accuracy int)\n\n\n\n\nThis will consume events from Proximity sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-gyroscope \n(Source)\n\n\nGyroscope Source gets events from gyroscope sensor of android device. The events are related to device\u2019s rate of rotation. This will output a key value mapwith rotationX (rotation rate vector component in X direction), rotationY(in Y diirection),rotationZ (in Z direction) sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys\n\n\n\nSyntax\n\n\n@source(type=\nandroid-gyroscope\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \npolling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-gyroscope' ,@map(type='keyvalue'))\ndefine stream gyroscopeStream(sensor string, rotationX float, accuracy int)\n\n\n\n\nThis will consume events from Gyroscope sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-gyroscope' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream gyroscopeStream(sensor string, rotationX float, accuracy int)\n\n\n\n\nThis will consume events from Gyroscope sensor transport periodically with a interval of 100 milliseconds.\n\n\n\nandroid-broadcast \n(Source)\n\n\nBroadcast source will consume internal android events from broadcast intents from android os and apps. This source will output a key value map withtimestamp and what ever a key available in received intent. The keys descriptions are available in https://developer.android.com/reference/android/content/Intent.htmlEvent will be triggered only when a broadcast intent received to this source.\n\n\n\nSyntax\n\n\n@source(type=\nandroid-broadcast\n, identifier=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nidentifier\n\n        \nBroadcast source will catch intents which has this identifier name \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-broadcast',identifier = \u2018SIDDHI_STREAM\u2019 ,@map(type='keyvalue'))\ndefine stream fooStream(state bool, timestamp long)\n\n\n\n\nThis will consume internal android events from broadcast intents which has action \u201cSIDDHI_STREAM\u201d.\n\n\n\nandroid-location \n(Source)\n\n\nLocation Source gets events from location sensor of android device. This will output a key value map with longitude,latitude,altitude, bearing, speed, accuracy and timestamp as keys.\n\n\n\nSyntax\n\n\n@source(type=\nandroid-location\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npolling.interval\n\n        \n polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even isf the sensor value changes.\n\n        \n0L\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = 'android-location' ,@map(type='keyvalue'))\ndefine stream locationStream(sensor string, location float, accuracy int)\n\n\n\n\nThis will consume events from Location sensor transport when the sensor value is changed.\n\n\n\nEXAMPLE 2\n\n\n@source(type = 'android-location' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream locationStream(sensor string, location float, accuracy int)\n\n\n\n\nThis will consume events from Location sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "1.0.0-SNAPSHOT"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#api-docs-v100-snapshot", 
            "text": "", 
            "title": "API Docs - v1.0.0-SNAPSHOT"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-broadcast-sink", 
            "text": "This will publish events arriving to the stream through android broadcasts  intents which has attribute values as extras.  Syntax  @sink(type= android-broadcast , identifier= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         identifier \n         Identifier is a mandatory parameter which represents the actions of the broadcast. This action is used by broadcast listeners to identify the intent.  \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type = 'android-broadcast' , identifier = 'SIDDHI_BROADCAST',@map(type='keyvalue',@payload(message = 'Value is {{value}} taken from {{sensor}}')))\ndefine stream fooStream(sensor string, value float, accuracy float)  This will publish events arriving for fooStream as Intents which has key 'message' and value 'Value is...' string as extra information in the intent. Intent Listeners should listen for SIDDHI_BROADCAST action to receive this intent.  EXAMPLE 2  @sink(type = 'android-broadcast' , identifier = 'SIDDHI_BROADCAST',@map(type='keyvalue'))\ndefine stream fooStream(sensor string, value float, accuracy float)  This will publish events arriving for fooStream as Intents which has keys 'sensor','value','accuracy' and respective values as extra information in the intent. Intent Listeners should listen for SIDDHI_BROADCAST action to receive this intent.", 
            "title": "android-broadcast (Sink)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-sound-sink", 
            "text": "This will play android phone ringtone when ever it receives an event. It will played for a user specified time period  Syntax  @sink(type= android-sound , play.time= INT , ring.tone.uri= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         play.time \n         This parameter will specify the time period in seconds the ringing tone played \n         10 \n         INT \n         Yes \n         No \n     \n     \n         ring.tone.uri \n         This parameter will specify URI of the ringing tone to be played \n         Notification ring tone URI \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type = 'android-sound',play.time = \u201810\u2019, ring.tone='3',@map(type='keyvalue'))\ndefine stream fooStream(sensor string, value float, accuracy float)  This will ring the device when ever it receives an eventfor 10 seconds time", 
            "title": "android-sound (Sink)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-notification-sink", 
            "text": "This will publish events arriving to the stream through android notifications  Syntax  @sink(type= android-notification , multiple.notifications= BOOL , title= STRING , icon= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         multiple.notifications \n         If multipleNotifications is set as true new notification will be published for every new event arriving at the stream. Otherwise it will override the previously published notification if it is not cleared. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         title \n         Title of the notification message \n         Siddhi Platform \n         STRING \n         Yes \n         No \n     \n     \n         icon \n         Android id of notification icon image resource \n         Default icon \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type = 'android-notification',title = \u2018Example\u2019, icon = \u20181\u2019, multiple.notifications = \u2018true\u2019,@map(type='keyvalue',@payload(message = 'Value is {{value}} taken from {{sensor}}')))\ndefine stream fooStream(sensor string, value float, accuracy float)  This will publish events arrive to fooStream through android notifications which has title 'Example'. For each event it will send a new notification instead of updating the previous one. Notification will have format key:value  EXAMPLE 2  @sink(type = 'android-notification',title = \u2018Example\u2019, icon = \u20183\u2019, multiple.notifications = \u2018true\u2019,@map(type='keyvalue',@payload('Value is {{value}} taken from {{sensor}}')))\ndefine stream fooStream(sensor string, value float, accuracy float)  This will publish events arrive to fooStream through android notifications which has title 'Example'. For each event it will send a new notification instead of updating the previous one. Notification will contain the single message", 
            "title": "android-notification (Sink)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-humidity-source", 
            "text": "Humidity Source gets events from humidity sensor of android device.This will output a key value map with humidity (humidity value), sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys   Syntax  @source(type= android-humidity , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n          polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-humidity' ,@map(type='keyvalue'))\ndefine stream humidityStream(sensor string, humidity float, accuracy int)  This will consume events from Humidity sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-humidity' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream humidityStream(sensor string, humidity float, accuracy int)  This will consume events from Humidity sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-humidity (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-gravity-source", 
            "text": "Gravity Source gets events from gravity sensor of android device. This will output a key value map with gravityX (gravity vector component in X direction), gravityY(in Y diirection),gravityZ (in Z direction) sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys  Syntax  @source(type= android-gravity , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n          polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-gravity' ,@map(type='keyvalue'))\ndefine stream gravityStream(sensor string, gravityX float, accuracy int)  This will consume events from Gravity sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-gravity' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream gravityStream(sensor string, gravityX float, accuracy int)  This will consume events from Gravity sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-gravity (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-linear-accelerometer-source", 
            "text": "Linear Accelerometer Source gets events from Linear accelerometer sensor of android device. This will output a key value map with accelerationX ( linear acceleration vector component in X direction), accelerationY(in Y diirection),accelerationZ (in Z direction) sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys  Syntax  @source(type= android-linear-accelerometer , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n          polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-linear-accelerometer' ,@map(type='keyvalue'))\ndefine stream accelerometerStream(sensor string, accelerometerX float, accuracy int)  This will consume events from Linear Accelerometer sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-linear-accelerometer' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream accelerometerStream(sensor string, accelerometerX float, accuracy int)  This will consume events from  Linear Accelerometer sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-linear-accelerometer (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-pressure-source", 
            "text": "Pressure Source gets events from pressure sensor of android device. This will output a key value map with pressure (pressure in mbar), sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys  Syntax  @source(type= android-pressure , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n         polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-pressure' ,@map(type='keyvalue'))\ndefine stream pressureStream(sensor string, pressure float, accuracy int)  This will consume events from Pressure sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-pressure' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream pressureStream(sensor string, pressure float, accuracy int)  This will consume events from Pressure sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-pressure (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-rotation-source", 
            "text": "Rotation vector Source gets events from rotation vector sensor of android device. The events are related to device\u2019s rate of rotation. This will output a key value map with rotationX (rotation vector component in X direction), rotationY(in Y diirection),rotationZ (in Z direction), valueScalar (scalar value) sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys  Syntax  @source(type= android-rotation , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n         polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-rotation' ,@map(type='keyvalue'))\ndefine stream rotaionStream(sensor string, rotationX float, accuracy int)  This will consume events from Rotation vector sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-rotation ' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream rotationStream(sensor string, rotationX float, accuracy int)  This will consume events from Rotation vector sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-rotation (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-light-source", 
            "text": "Light Source gets events from light sensor of android device. This will output a key value map with light (illuminance in lx), sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys  Syntax  @source(type= android-light , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n          polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-light' ,@map(type='keyvalue'))\ndefine stream lightStream(sensor string, light float, accuracy int)  This will consume events from Light sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-light' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream lightStream(sensor string, light float, accuracy int)  This will consume events from Light sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-light (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-magnetic-source", 
            "text": "Magnetic Source gets events from magnetic sensor of android device. The events are related to ambient geomagnetic field. This will output a key value map with magneticX (Geomagnetic field strength in X direction), magneticY(in Y diirection),magneticZ (in Z direction) ,sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys  Syntax  @source(type= android-magnetic , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n         polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-magnetic' ,@map(type='keyvalue'))\ndefine stream magneticStream(sensor string, magneticX float, accuracy int)  This will consume events from Magnetic sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-magnetic' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream magneticStream(sensor string, magneticX float, accuracy int)  This will consume events from Magnetic sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-magnetic (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-steps-source", 
            "text": "Steps Source gets events from step detector sensor of android device which is a software based sensor.  Syntax  @source(type= android-steps , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n          polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. If this is not specified 1 will be given as output for each step taken. Otherwise number of steps taken within this interval \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-steps' ,polling.interval = 100 ,@map(type='keyvalue'))\ndefine stream fooStream(sensor string, steps int, accuracy float)  This will consume events from Step Detector sensor transport It will insert number of steps taken within the time frame of polling interval.  EXAMPLE 2  @source(type = 'android-steps' ,@map(type='keyvalue'))\ndefine stream fooStream(sensor string, steps int, accuracy float)  This will consume events from Proximity sensor transport When ever user took a step it will input an event into the stream which has steps count as 1", 
            "title": "android-steps (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-accelerometer-source", 
            "text": "Accelerometer Source gets events from accelerometer sensor of android device. This will output a key value map with accelerationX (acceleration in X direction), accelerationY(in Y diirection),accelerationZ(in Z direction) sensor (sensor name) and timestamp(tiime at which event arrives) as keys  Syntax  @source(type= android-accelerometer , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n          polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-accelerometer' ,@map(type='keyvalue'))\ndefine stream accelerometerStream(sensor string, accelerometerX float, accuracy int)  This will consume events from Accelerometer sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-accelerometer' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream accelerometerStream(sensor string, accelerometerX float, accuracy int)  This will consume events from Accelerometer sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-accelerometer (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-temperature-source", 
            "text": "Temperature Source gets events from temperature sensor of android device.This will output a key value map with temperature (temperature in C), sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys  Syntax  @source(type= android-temperature , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n          polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-temperature' ,@map(type='keyvalue'))\ndefine stream temperatureStream(sensor string, temperature float, accuracy int)  This will consume events from Temperature sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-temperature' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream temperatureStream(sensor string, temperature float, accuracy int)  This will consume events from Temperature sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-temperature (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-game-rotation-source", 
            "text": "Game Rotation Source gets events from game Rotation sensor of android device. The events are related to device\u2019s rate of rotation. This will output a key value map with rotationX (rotation vector component in X direction), rotationY(in Y diirection),rotationZ (in Z direction) sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys  Syntax  @source(type= android-game-rotation , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n         polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-game-rotation' ,@map(type='keyvalue'))\ndefine stream Stream(sensor string, rotationX float, accuracy int)  This will consume events from Game Rotation sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-game-rotation' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream gameRotationStream(sensor string, rotationX float, accuracy int)  This will consume events from Game Rotation sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-game-rotation (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-proximity-source", 
            "text": "Proximity Source gets events from proximity sensor of android device. This will output a key value map with proximity (distance in cm), sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys  Syntax  @source(type= android-proximity , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n          polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-proximity' ,@map(type='keyvalue'))\ndefine stream proximityStream(sensor string, proximity float, accuracy int)  This will consume events from Proximity sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-proximity' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream proximityStream(sensor string, proximity float, accuracy int)  This will consume events from Proximity sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-proximity (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-gyroscope-source", 
            "text": "Gyroscope Source gets events from gyroscope sensor of android device. The events are related to device\u2019s rate of rotation. This will output a key value mapwith rotationX (rotation rate vector component in X direction), rotationY(in Y diirection),rotationZ (in Z direction) sensor (sensor name), accuracy(could be HIGH (3) ,MEDIUM (2) or LOW (1) ) and timestamp(time at which event arrives) as keys  Syntax  @source(type= android-gyroscope , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n         polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even if the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-gyroscope' ,@map(type='keyvalue'))\ndefine stream gyroscopeStream(sensor string, rotationX float, accuracy int)  This will consume events from Gyroscope sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-gyroscope' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream gyroscopeStream(sensor string, rotationX float, accuracy int)  This will consume events from Gyroscope sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-gyroscope (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-broadcast-source", 
            "text": "Broadcast source will consume internal android events from broadcast intents from android os and apps. This source will output a key value map withtimestamp and what ever a key available in received intent. The keys descriptions are available in https://developer.android.com/reference/android/content/Intent.htmlEvent will be triggered only when a broadcast intent received to this source.  Syntax  @source(type= android-broadcast , identifier= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         identifier \n         Broadcast source will catch intents which has this identifier name  \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-broadcast',identifier = \u2018SIDDHI_STREAM\u2019 ,@map(type='keyvalue'))\ndefine stream fooStream(state bool, timestamp long)  This will consume internal android events from broadcast intents which has action \u201cSIDDHI_STREAM\u201d.", 
            "title": "android-broadcast (Source)"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#android-location-source", 
            "text": "Location Source gets events from location sensor of android device. This will output a key value map with longitude,latitude,altitude, bearing, speed, accuracy and timestamp as keys.  Syntax  @source(type= android-location , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         polling.interval \n          polling.interval is the time between two events in milliseconds. If a polling interval is specified events are generated only at that frequency even isf the sensor value changes. \n         0L \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type = 'android-location' ,@map(type='keyvalue'))\ndefine stream locationStream(sensor string, location float, accuracy int)  This will consume events from Location sensor transport when the sensor value is changed.  EXAMPLE 2  @source(type = 'android-location' ,polling.interval = 100,@map(type='keyvalue'))\ndefine stream locationStream(sensor string, location float, accuracy int)  This will consume events from Location sensor transport periodically with a interval of 100 milliseconds.", 
            "title": "android-location (Source)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}